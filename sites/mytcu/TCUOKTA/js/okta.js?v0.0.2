$(function () {
    "use strict";

    var LoginForm = function (element, options) {

		
        var id = element.id();
        var defaults = {
            elements: {
                form: element,
                usernameField: element.find("#" + id + "_username"),
                passwordField: element.find("#" + id + "_password"),
                submitButton: element.find("#" + id + "_submit"),
                inputPanel: element.find("#" + id + "_inputs"),
                fallbackPanel: element.find("#" + id + "_fallback"),
                redirectButton: element.find("#" + id + "_redirect"),
                logoutButton: element.find("#" + id + "_logout"),
                messageBanner: $("#emptyMessage"),
                messageCenter: $("#messageCenter"),
            },
            urls: {
                logoutRedirectUri: window.location,
                orgUrl: undefined,
                redirectUri: undefined,
            },
            messages: {
                defaultErrorMessage: "An unexpected error occurred. Please contact the TCU Helpdesk.",
                successfulLoginMessage: "Success! You will be redirected in 2 seconds...",
                xFieldBlankMessage: "field cannot be left blank.",
                messageTimeout: 4500,
                rateLimit: 1500 
            }
        };

        this.oktaSession = {};
        this.lastAttemptTimestamp = 0;

        // Merge settings (deep)
        $.extend(true, this, defaults, options);

        this.authClient = new OktaAuth({url: this.urls.orgUrl});

        if (this.urls.redirectUri === undefined) {
            // /app/UserHome is the default dashboard for Okta
            this.urls.redirectUri = this.urls.orgUrl + "/app/UserHome";
        }

        // Start everything up
        this.init();
    };

    LoginForm.prototype = {
        init: function () {
            // Check for session
            var that = this;
            this.authClient.session.exists()
                .then(function (exists) {
                    if (exists) {
                        // Get the current session
                        that.authClient.session.get()
                            .then(function (session) {
                                // There is an Okta session started for this browser. Go ahead
                                // and display a redirection button instead of the login page.
                                // If the user wants to logout, they can press the logout button.

                                that.oktaSession = session;
                                // Replace login options
                                //that.showSuccess("You are already logged-in.", false);
									//$("#username_check").fadeOut();
									//$("#okta_login").fadeIn();
									//$('#loginOKTA_logout').trigger('click');
							
							
									that.authClient.session.close();//if session exists, destroy it.


                                //that.showFallbackPanel();
								
                            })
                            .fail(function (error) {
                                // Hmmm... Connectivity failure. Forget about it...
                                console.log(error);
                                that.showError(that.messages.defaultErrorMessage);
                            });
                    }
                })
                .fail(function (error) {
                    // Hmmm... Connectivity failure. Forget about it...
                    console.log(error);
                    that.showError(that.messages.defaultErrorMessage);
                });

            // Create login submit button handler
            this.elements.form.submit(function (e) {
                // Prevent posting of the form
                e.preventDefault();
				
				var userid = $("#loginOKTA_username").val();
				//////////////////////////////////////////////////////////////
				if((userid.indexOf('$') > -1) || (set_override==true) || (userid.indexOf('#') > -1) || (userid.indexOf('ISPUP') > -1) || (userid.indexOf('!') > -1) || (userid.indexOf('/') > -1)){
				var userid = $("#loginOKTA_username").val();
				var pwd = $("#loginOKTA_password").val();
				
				$("#loginOKTA_submit span").hide();
				$("#loginOKTA_submit").addClass("OKTAspinner");
				$("#loginOKTA_submit").attr("disabled", true);
				
				if(userid.indexOf('!') > -1){
					userid = userid.replace("!", "");
				}
					
					
				var prefixlower;
				var prefixUPPER;

				var checkbase = window.location.host;

				switch(checkbase) {
				case 'my.is.tcu.edu':
				prefixlower = 'pa9prd';
				prefixUPPER = 'PA9PRD';
				break;

				case 'mydev.is.tcu.edu':
				prefixlower = 'pa9dev';
				prefixUPPER = 'PA9DEV';
				break;

				case 'mytest.is.tcu.edu':
				prefixlower = 'pa9tst';
				prefixUPPER = 'PA9TST';
				break;

				case 'mystage.is.tcu.edu':
				prefixlower = 'pa9stg';
				prefixUPPER = 'PA9STG';
				break;

				case 'mystage2.is.tcu.edu':
				prefixlower = 'pa9stg2';
				prefixUPPER = 'PA9STG2';
				break;

				case 'myupg1.is.tcu.edu':
				prefixlower = 'pa9upg1';
				prefixUPPER = 'PA9UPG1';
				break;
	
				case 'myupg2.is.tcu.edu':
				prefixlower = 'pa9upg2';
				prefixUPPER = 'PA9UPG2';
				break;

				case 'myupg3.is.tcu.edu':
				prefixlower = 'pa9upg3';
				prefixUPPER = 'PA9UPG3';
				break;

				case 'myupg4.is.tcu.edu':
				prefixlower = 'pa9upg4';
				prefixUPPER = 'PA9UPG4';
				break;
			
				default:
				prefixlower = 'pa9prd';
				prefixUPPER = 'PA9PRD';

				}/////// close switch
					
					
				///////// AJAX //////// AJAX //////////
				$.ajax({
					type: 'POST',
					url:  'https://'+window.location.host+'/psc/'+prefixlower+'/?cmd=login&adm=1',
					data: {userid:userid, pwd:pwd},
					success: function( response ){
						var checkme = response;
						if(checkme.indexOf("pt_envinfo") !== -1){
						//now we do check for ezbill
							if(ezbill==true){
window.location = "https://my.is.tcu.edu/psp/pa9prd/EMPLOYEE/CS9PRD/c/SSF_STUDENT_FL.SSF_FIN_ACCT_MD_FL.GBL?Action=U&MD=Y&GMenu=T_SS_SF_MNU_FL&GComp=T_SS_SF_STARTPG_FL&GPage=T_SS_SF_STARTPG_FL&scname=ADMN_VIEW_STUDENT_ACCOUNT";
							}else{
								window.location = "https://"+window.location.host+"/psc/"+prefixlower+"/EMPLOYEE/"+prefixUPPER+"/c/NUI_FRAMEWORK.PT_LANDINGPAGE.GBL";
							}//close if else
							}else{
							var live_str = $('<div>',{html:response});
							var error_message = live_str.find('#login_error').text();
							
							$("#messageCenter").html('<div id="emptyMessage" class="message error newmsg" style="display: none;"><img src="css/alert.png" width="20px" style="display:inline-block;float:left;margin:0px;" />'+error_message+'</div>');
							$("#messageCenter").fadeIn().delay(3500).fadeOut();
							$("#messageCenter .newmsg").fadeIn();
							$("#loginOKTA_submit span").fadeIn();
							$("#loginOKTA_submit").removeClass("OKTAspinner");
							$("#loginOKTA_submit").attr("disabled", false);
						}
					}//close success params
				});//close ajax
				///////// AJAX //////// AJAX //////////

				///////////////////////////////
				}else{////close if check 
				//////////////////////////////////////////////////////////////				
				
				
				

                // Disable button to prevent double posts
                that.startLoginSession();

                // Try to login.
                that.login()
                    .then(function () {
                        // Success
                        //that.showSuccess(that.messages.successfulLoginMessage);
                    })
                    .catch(function (error) {
                        // Failure
                        that.showError(error);
                        // Re-enable the button if the auth fails
                        that.endLoginSession();
                    });
					
			//////////////////////////////////////////////////////////////				
			}/////close if / else double ajax check
			//////////////////////////////////////////////////////////////				

            });
				
				

									  
			// Create fallback redirect handler
            this.elements.redirectButton.click(function (e) {
                e.preventDefault();
                window.location = that.urls.redirectUri;
            });

            this.elements.logoutButton.click(function (e) {
                e.preventDefault();
                that.authClient.session.close()
                    .then(function () {
                        window.location = that.urls.logoutRedirectUri;
                        //window.location = "https://"+window.location.host+"/psc/pa9dev/EMPLOYEE/PA9DEV/c/NUI_FRAMEWORK.PT_LANDINGPAGE.GBL";
                        
                    })
                    .fail(function (error) {
                        console.log(error);
                        //window.location = "https://"+window.location.host+"/psc/pa9dev/EMPLOYEE/PA9DEV/c/NUI_FRAMEWORK.PT_LANDINGPAGE.GBL";
                        //that.showError(that.messages.defaultErrorMessage);
                    });
            });
        },
        showFallbackPanel: function () {
            this.elements.inputPanel.slideUp();
            this.elements.fallbackPanel.fadeIn();
        },
        startLoginSession: function () {
            this.elements.submitButton
                .attr("disabled", true)
                .addClass("OKTAspinner")
                .contents().hide();
            this.lastAttemptTimestamp = Date.now();
        },
        endLoginSession: function () {
            var that = this;
            var currentTimestamp = Date.now();
            var diff = (this.lastAttemptTimestamp + this.messages.rateLimit) - currentTimestamp;
            var wait = Math.max(0, diff);

            setTimeout(function () {
                that.elements.submitButton
                    .attr("disabled", false)
                    .removeClass("OKTAspinner")
                    .contents().show();
            }, wait);
        },
        getLoginModel: function (validationToken) {
            if (validationToken === undefined) {
                throw "No validation token present";
            }

            if (!validationToken.valid) {
                throw "No validation token show invalid data";
            }

            // Token is valid
            return {
                username: this.elements.usernameField.val(),
                password: this.elements.passwordField.val()
            };
        },

        // Validates the username and password fields
        getValidationToken: function () {
            var token = {
                valid: true,
                messages: []
            };

            // Check for undefined, empty string, and whitespace-only

            if (this.elements.usernameField.val() === undefined ||
                    this.elements.usernameField.val() === "" ||
                    this.elements.usernameField.val().trim() === "") {
                token.valid = false;
                token.messages.push("Username " + this.messages.xFieldBlankMessage);
            }

            if (this.elements.passwordField.val() === undefined ||
                    this.elements.passwordField.val() === "" ||
                    this.elements.passwordField.val().trim() === "") {
                token.valid = false;
                token.messages.push("Password " + this.messages.xFieldBlankMessage);
            }

            return token;
        },

        // Queue a failure message (red)
        showError: function (errorMessage, timeout) {
            this.showMessage("error", errorMessage, timeout);
        },

        // Queue a success message (green)
        showSuccess: function (successMessage, timeout) {
           this.showMessage("success", successMessage, 5);
        },

        // Queue a message
        showMessage: function (type, message, timeout) {
            // Duck-typing, yay!
            if (message instanceof Array) {
                // Join with a line break if the var is
                // an array
                message = message.join("<br />");
            }

            if (timeout === undefined) {
                timeout = true;
            }

            var newBanner = this.elements.messageBanner.clone();
            newBanner.appendTo(this.elements.messageCenter)
                .addClass(type)
                .html('<img src="css/alert.png" width="20px" style="display:inline-block;float:left;margin:0px;" />Your User ID and/or Password are invalid.')
                .fadeIn();

            // Hide after 2 seconds
            if (timeout) {
                setTimeout(function () {
                    newBanner.fadeOut();
                }, this.messages.messageTimeout);
            }
        },
        // Takes success and failure callbacks
        login: function () {
            var that = this;

            return new Promise(function (resolve, reject) {
                var validationToken = that.getValidationToken();
                if (!validationToken.valid) {
                    reject(validationToken.messages);
                }

                that.authClient.signIn(that.getLoginModel(validationToken))
                    .then(function (transaction) {
                        // On success
                        switch (transaction.status) {
                        case "SUCCESS":
                            resolve();
                            // Sets a cookie on redirect
                            //setTimeout(function () {
                                that.authClient.session.setCookieAndRedirect(transaction.sessionToken, that.urls.redirectUri);
                            //}, 2000);

                            break;
                        default:
                            reject("Login failed &mdash; please contact the TCU Help Desk.");
                            throw "We cannot handle the " + transaction.status + " status";
                        }
                    })
                    .fail(function (err) {
                        // On failure
                        var message = "Unknown error";
                        if (err.message !== undefined) {
                            message = err.message;
                        }

                        reject(message + " &mdash; please try again.");
                    });
            });
        }
    };

    $.fn.id = function () {
        return this.attr("id");
    };

    // Create a jquery extension method to init the form
    $.fn.tcuLogin = function (options) {
				

        return new LoginForm(this, options);
    };
});